


import java.awt.Desktop; // Required to allow sketch to open file windows


////////////////////////////////////////////////////////////////////////////////////////////////

//                       >>>>>>>>>> USER CONFIGURED PARAMETERS START HERE <<<<<<<<<<

// Use font number or name, -1 for fontNumber means use fontName below, a value >=0 means use system font number from list.
// When the sketch is run it will generate a file called "systemFontList.txt" in the sketch folder, press Ctrl+K to see it.
// Open the "systemFontList.txt" in a text editor to view the font files and reference numbers for your system.

int fontNumber = -1; // << Use [Number] in brackets from the fonts listed.

// OR use font name for ttf files placed in the "Data" folder or the font number seen in IDE Console for system fonts
//                                                  the font numbers are listed when the sketch is run.
//                |         1         2     |       Maximum filename size for SPIFFS is 31 including leading /
//                 1234567890123456789012345        and added point size and .vlw extension, so max is 25
String fontName = "unifont";  // Manually crop the filename length later after creation if needed
                                     // Note: SPIFFS does NOT accept underscore in a filename!
String fontType = ".ttf";
//String fontType = ".otf";


// Define the font size in points for the TFT_eSPI font file
int  fontSize = 16;

// Font size to use in the Processing sketch display window that pops up (can be different to above)
int displayFontSize = 16;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Next we specify which unicode blocks from the the Basic Multilingual Plane (BMP) are included in the final font file. //
// Note: The ttf/otf font file MAY NOT contain all possible Unicode characters, refer to the fonts online documentation. //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static final int[] unicodeBlocks = {
  0x0021, 0x007E, //Basic Latin, 128, 128, Latin (52 characters), Common (76 characters)
};

// Here we specify particular individual Unicodes to be included (appended at end of selected range)
static final int[] specificUnicodes = {

0x2013,
0x4E00,
0x4E0A,
0x4E0B,
0x4E0D,
0x4E2A,
0x4E2D,
0x4E3A,
0x4E3B,
0x4E48,
0x4E4B,
0x4E5F,
0x4E66,
0x4E86,
0x4E8B,
0x4E8E,
0x4E91,
0x4E92,
0x4E9B,
0x4EA4,
0x4EBA,
0x4ECE,
0x4ED6,
0x4EE5,
0x4EEA,
0x4EEC,
0x4EF6,
0x4EFD,
0x4F18,
0x4F1A,
0x4F20,
0x4F46,
0x4F5C,
0x4F60,
0x4FDD,
0x4FE1,
0x50A8,
0x50CF,
0x5145,
0x5146,
0x5165,
0x516C,
0x5173,
0x5176,
0x5185,
0x518C,
0x51FA,
0x51FB,
0x5206,
0x5207,
0x5220,
0x5230,
0x5236,
0x5237,
0x524D,
0x526A,
0x52A1,
0x52A8,
0x5343,
0x5355,
0x535A,
0x5361,
0x5370,
0x53BB,
0x53CC,
0x53D1,
0x53D6,
0x53E3,
0x53EA,
0x53EF,
0x53F0,
0x53F7,
0x53F8,
0x540C,
0x540E,
0x5427,
0x548C,
0x54CD,
0x552E,
0x5546,
0x5668,
0x56DE,
0x56E0,
0x56FD,
0x56FE,
0x5728,
0x5730,
0x573E,
0x5740,
0x575B,
0x5783,
0x57DF,
0x5899,
0x58F3,
0x5907,
0x590D,
0x591A,
0x5927,
0x5929,
0x5934,
0x5939,
0x5979,
0x597D,
0x5982,
0x5B50,
0x5B57,
0x5B58,
0x5B66,
0x5B9A,
0x5B9D,
0x5B9E,
0x5BA2,
0x5BA4,
0x5BB6,
0x5BBD,
0x5BF9,
0x5C0F,
0x5C31,
0x5C40,
0x5C4F,
0x5C5E,
0x5E16,
0x5E26,
0x5E55,
0x5E74,
0x5E7B,
0x5E8F,
0x5E94,
0x5E97,
0x5EA6,
0x5F00,
0x5F0F,
0x5F15,
0x5F53,
0x5F55,
0x5F97,
0x5FAE,
0x5FC3,
0x6000,
0x6027,
0x60F3,
0x620F,
0x6210,
0x6211,
0x6234,
0x6240,
0x624B,
0x6253,
0x626B,
0x6284,
0x62A4,
0x62A5,
0x62D2,
0x6309,
0x636E,
0x6389,
0x63A5,
0x63CF,
0x63D2,
0x641C,
0x6444,
0x6478,
0x64AD,
0x64CE,
0x6536,
0x6570,
0x6587,
0x65B0,
0x65B9,
0x65E0,
0x65F6,
0x662F,
0x663E,
0x667A,
0x6709,
0x672C,
0x673A,
0x6765,
0x677F,
0x679C,
0x6807,
0x680F,
0x6837,
0x683C,
0x684C,
0x6863,
0x69FD,
0x6B4C,
0x6B7B,
0x6BD2,
0x6C60,
0x6CA1,
0x6CD5,
0x6CE8,
0x6D4F,
0x6D6A,
0x6D88,
0x6DD8,
0x6E38,
0x6E90,
0x6ED1,
0x706B,
0x706F,
0x70B9,
0x7136,
0x7247,
0x7259,
0x7269,
0x7279,
0x73A9,
0x73B0,
0x7406,
0x751F,
0x7528,
0x7535,
0x7535,
0x75C5,
0x767B,
0x767E,
0x7684,
0x76D8,
0x770B,
0x771F,
0x7740,
0x77ED,
0x7801,
0x786C,
0x789F,
0x78C1,
0x793A,
0x793E,
0x79BB,
0x79CD,
0x79FB,
0x7A0B,
0x7A97,
0x7B14,
0x7B52,
0x7B7E,
0x7B80,
0x7B97,
0x7BB1,
0x7C98,
0x7CFB,
0x7D20,
0x7D22,
0x7EBF,
0x7ECF,
0x7EDC,
0x7EDD,
0x7EDF,
0x7F16,
0x7F51,
0x800C,
0x8033,
0x804A,
0x8054,
0x80FD,
0x8111,
0x81EA,
0x8282,
0x82F9,
0x83DC,
0x84DD,
0x85CF,
0x884C,
0x8868,
0x8981,
0x89C6,
0x89C8,
0x89E3,
0x89E6,
0x8BA1,
0x8BB0,
0x8BBA,
0x8BBE,
0x8BC4,
0x8BDD,
0x8BF4,
0x8C37,
0x8D2D,
0x8D34,
0x8D77,
0x8F6C,
0x8F6F,
0x8F7D,
0x8F91,
0x8FC7,
0x8FD4,
0x8FD8,
0x8FD9,
0x8FDB,
0x9001,
0x9002,
0x9053,
0x90A3,
0x90AE,
0x90E8,
0x90FD,
0x914D,
0x9177,
0x91CC,
0x94AE,
0x94FE,
0x9501,
0x952E,
0x95ED,
0x9632,
0x9644,
0x9664,
0x96F6,
0x9762,
0x97F3,
0x9875,
0x9891,
0x9F20,


0x4E00, 0x516B, 0x513F, 0x4E8C, 0x51E0, 0x4E5D, 0x529B, 0x4E86, 0x4E03,
0x4EBA, 0x5165, 0x5341, 0x53C8, 0x624D, 0x5927, 0x5E72, 0x4E2A, 0x5DE5,
0x5E7F, 0x5DF1, 0x53E3, 0x9A6C, 0x4E48, 0x95E8, 0x5973, 0x4E09, 0x5C71,
0x4E0A, 0x4E07, 0x4E0B, 0x5C0F, 0x4E5F, 0x5DF2, 0x4E8E, 0x4E0E, 0x4E4B,
0x5B50,
0x6BD4, 0x4E0D, 0x957F, 0x8F66, 0x4ECE, 0x53CD, 0x65B9, 0x5206, 0x98CE, 
0x516C, 0x5316, 0x89C1, 0x5F00, 0x5185, 0x6C14, 0x8BA4, 0x65E5, 0x5C11,
0x4EC0, 0x624B, 0x5929, 0x4E3A, 0x6587, 0x65E0, 0x4E94, 0x5FC3, 0x4EE5,
0x5143, 0x6708, 0x4E2D, 0x5305, 0x5317, 0x672C, 0x51FA, 0x5904, 0x6253,
0x4EE3, 0x7535, 0x4E1C, 0x5BF9, 0x53D1, 0x53E4, 0x8BB0, 0x52A0, 0x53EF,
0x7ACB, 0x4EEC, 0x6C11, 0x76EE, 0x5E73, 0x53BB, 0x8BA9, 0x751F, 0x4E16,
0x5E02, 0x53F8, 0x56DB, 0x4ED6, 0x5B83, 0x53F0, 0x5934, 0x5916, 0x4E1A,
0x7528, 0x7531, 0x6B63, 0x53EA, 0x4E3B, 0x5B89, 0x767E, 0x5E76, 0x4EA7,
0x573A, 0x6210, 0x6B64, 0x6B21, 0x8FBE, 0x5F53, 0x5730, 0x52A8, 0x591A,
0x800C, 0x5404, 0x5173, 0x5149, 0x8FC7, 0x597D, 0x5408, 0x7EA2, 0x540E,
0x534E, 0x56DE, 0x4F1A, 0x673A, 0x4EF7, 0x4EF6, 0x4EA4, 0x519B, 0x8001,
0x540D, 0x90A3, 0x5E74, 0x4F01, 0x5168, 0x5982, 0x8272, 0x5E08, 0x6536,
0x5979, 0x540C, 0x95EE, 0x897F, 0x5148, 0x5411, 0x884C, 0x56E0, 0x6709,
0x518D, 0x5728, 0x81F3, 0x81EA, 0x628A, 0x62A5, 0x522B, 0x4F46, 0x544A,
0x66F4, 0x8FD8, 0x95F4, 0x8FDB, 0x514B, 0x6765, 0x52B3, 0x91CC, 0x5229,
0x4E24, 0x6CA1, 0x6BCF, 0x4F60, 0x5374, 0x793E, 0x8EAB, 0x58F0, 0x65F6,
0x8BC6, 0x79C1, 0x4F53, 0x5B8C, 0x4F4D, 0x6211, 0x5F62, 0x5E94, 0x5458,
0x8FD9, 0x8D70, 0x4F5C, 0x8868, 0x5230, 0x7684, 0x5B9A, 0x6CD5, 0x670D, 
0x80A1, 0x56FD, 0x679C, 0x548C, 0x8BDD, 0x6216, 0x91D1, 0x4EAC, 0x7ECF,
0x6797, 0x660E, 0x5176, 0x9752, 0x5B9E, 0x4F7F, 0x4E8B, 0x53D7, 0x6240,
0x7269, 0x73B0, 0x4E9B, 0x5B66, 0x8005, 0x77E5, 0x5236, 0x4FBF, 0x70B9,
0x5EA6, 0x7ED9, 0x5F88, 0x6D3B, 0x6D4E, 0x5C06, 0x754C, 0x770B, 0x7F8E, 
0x9762, 0x5357, 0x54C1, 0x524D, 0x4EB2, 0x662F, 0x8BF4, 0x7EDF, 0x76F8,
0x4FE1, 0x8981, 0x653F, 0x79CD, 0x91CD, 0x603B, 0x88AB, 0x90E8, 0x90FD,
0x9AD8, 0x6D77, 0x5BB6, 0x9152, 0x6D41, 0x96BE, 0x80FD, 0x8D77, 0x94B1, 
0x8BF7, 0x7279, 0x901A, 0x6821, 0x6837, 0x539F, 0x771F, 0x8D44, 0x5E38,
0x5F97, 0x7B2C, 0x6559, 0x63A5, 0x7406, 0x7968, 0x60C5, 0x7403, 0x6DF1,
0x8C61, 0x7740, 0x505A, 0x9053, 0x7B49, 0x9ED1, 0x5C31, 0x8054, 0x671F,
0x7136, 0x65AF, 0x8C22, 0x6700, 0x611F, 0x89E3, 0x8DEF, 0x6570, 0x60F3,
0x65B0, 0x610F, 0x6458, 0x5FB7,


0x4E01, 0x98DE, 0x53CA, 0x4E45, 0x5343, 0x58EB, 0x4E61, 0x4EBF, 0x4E49,
0x5DF4, 0x529E, 0x5E01, 0x8BA2, 0x6597, 0x961F, 0x592B, 0x7236, 0x6237,
0x706B, 0x8BA1, 0x65A4, 0x4ECA, 0x4EC5, 0x5386, 0x516D, 0x6BDB, 0x7247, 
0x5207, 0x533A, 0x4ECD, 0x5347, 0x4E66, 0x53CC, 0x6C34, 0x592A, 0x738B,
0x827A,
0x5F15, 0x53CB, 0x4E91, 0x6B62, 0x4E13, 0x767D, 0x534A, 0x5FC5, 0x8FB9,
0x5E03, 0x5C14, 0x72AF, 0x529F, 0x6C49, 0x53F7, 0x4E4E, 0x51FB, 0x53EB,
0x8282, 0x65E7, 0x520A, 0x5170, 0x4E50, 0x53E6, 0x4EE4, 0x6BCD, 0x76AE, 
0x4E14, 0x5931, 0x77F3, 0x53F2, 0x793A, 0x672F, 0x672A, 0x52A1, 0x5199,
0x53F6, 0x8BAE, 0x5370, 0x6C38, 0x5360, 0x5403, 0x5145, 0x51B2, 0x866B,
0x4F20, 0x521B, 0x5B58, 0x5BFC, 0x706F, 0x9632, 0x8BBF, 0x4EFD, 0x8D1F,
0x521A, 0x5171, 0x89C2, 0x6B22, 0x7EA7, 0x7EAA, 0x6C5F, 0x8BB2, 0x5C3D, 
0x51B3, 0x8003, 0x5217, 0x5218, 0x8BBA, 0x5417, 0x4E70, 0x7C73, 0x519C,
0x66F2, 0x6743, 0x4EFB, 0x6740, 0x4F24, 0x8BBE, 0x5F0F, 0x6B7B, 0x4F3C,
0x5C81, 0x56E2, 0x7F51, 0x4F1F, 0x5174, 0x8BB8, 0x538B, 0x4E9A, 0x5EF6,
0x9633, 0x7237, 0x8863, 0x7EA6, 0x65E9, 0x5219, 0x4E89, 0x4F17, 0x5DDE, 
0x5B57, 0x963F, 0x5427, 0x4F34, 0x5175, 0x6B65, 0x8D22, 0x5C42, 0x6C89,
0x9648, 0x521D, 0x6751, 0x4F4E, 0x5F1F, 0x996D, 0x5426, 0x6539, 0x6C9F,
0x4F55, 0x62A4, 0x82B1, 0x9E21, 0x6781, 0x5373, 0x6280, 0x9645, 0x8FD1,
0x7A76, 0x5C40, 0x5747, 0x6297, 0x5757, 0x5FEB, 0x72C2, 0x51B5, 0x51B7,
0x674E, 0x8FDE, 0x9646, 0x9EA6, 0x7537, 0x5224, 0x6279, 0x6C42, 0x6C88,
0x82CF, 0x8BC9, 0x6761, 0x542C, 0x6295, 0x56F4, 0x5C3E, 0x5E0C, 0x7CFB, 
0x4E25, 0x8A00, 0x533B, 0x4F59, 0x56ED, 0x8FDC, 0x8FD0, 0x5F20, 0x627E, 
0x8BC1, 0x7EB8, 0x5FD7, 0x52A9, 0x4F4F, 0x8DB3, 0x5750, 0x8D25, 0x677F, 
0x7248, 0x5B9D, 0x676F, 0x5907, 0x53D8, 0x6CE2, 0x91C7, 0x53C2, 0x627F,
0x5355, 0x5E95, 0x5E97, 0x623F, 0x653E, 0x975E, 0x5E9C, 0x8BE5, 0x4F9B, 
0x8D2D, 0x5B98, 0x89C4, 0x753B, 0x8D27, 0x5EFA, 0x5C45, 0x5177, 0x523B, 
0x7A7A, 0x82E6, 0x62C9, 0x5F55, 0x7F57, 0x5356, 0x547D, 0x5462, 0x5FF5, 
0x6B27, 0x6015, 0x670B, 0x5947, 0x53D6, 0x8F6F, 0x59CB, 0x52BF, 0x89C6,
0x6001, 0x73A9, 0x5F80, 0x5473, 0x7EC6, 0x7EBF, 0x6027, 0x591C, 0x4F9D, 
0x6613, 0x82F1, 0x62E5, 0x6CB9, 0x80B2, 0x8D23, 0x62DB, 0x76F4, 0x8D28, 
0x6CBB, 0x7EC8, 0x5468, 0x6CE8, 0x8F6C, 0x7EC4, 0x6309, 0x67CF, 0x5E2E, 
0x4FDD, 0x6807, 0x67E5, 0x5DEE, 0x57CE, 0x6301, 0x9664, 0x7A7F, 0x6625,
0x5E26, 0x5F85, 0x6BD2, 0x72EC, 0x6BB5, 0x8D39, 0x590D, 0x9769, 0x6545, 
0x8D35, 0x5B69, 0x539A, 0x6025, 0x5956, 0x7ED3, 0x4E3E, 0x89C9, 0x7EDD, 
0x79D1, 0x5BA2, 0x7C7B, 0x4EAE, 0x73B2, 0x5F8B, 0x8FF7, 0x67D0, 0x54EA, 
0x5A1C, 0x8F7B, 0x795E, 0x751A, 0x7701, 0x80DC, 0x98DF, 0x9996, 0x601D,
0x9001, 0x867D, 0x5EAD, 0x7A81, 0x95FB, 0x663E, 0x9999, 0x54CD, 0x661F, 
0x5BA3, 0x9009, 0x7814, 0x97F3, 0x8BED, 0x9662, 0x600E, 0x6218, 0x6307, 
0x949F, 0x6D32, 0x7231, 0x6848, 0x73ED, 0x822C, 0x7B14, 0x75C5, 0x79F0, 
0x515A, 0x5012, 0x8C03, 0x8BFB, 0x987F, 0x8D76, 0x54E5, 0x683C, 0x6839,
0x5019, 0x83B7, 0x8F83, 0x8BFE, 0x6D6A, 0x79BB, 0x6599, 0x7559, 0x65C5, 
0x83AB, 0x62FF, 0x8111, 0x914D, 0x7834, 0x7F3A, 0x70ED, 0x5BB9, 0x8C01, 
0x901F, 0x8C08, 0x606F, 0x590F, 0x6D88, 0x7B11, 0x9A8C, 0x76CA, 0x5706, 
0x8F7D, 0x9020, 0x5C55, 0x7AD9, 0x503C, 0x81F4, 0x51C6, 0x5F69, 0x83DC,
0x65AD, 0x6562, 0x591F, 0x9986, 0x9EC4, 0x5A5A, 0x57FA, 0x5BC4, 0x5047, 
0x811A, 0x60CA, 0x7ADF, 0x636E, 0x8138, 0x9886, 0x7EFF, 0x6885, 0x68A6, 
0x6392, 0x76D8, 0x504F, 0x6E05, 0x5546, 0x552E, 0x968F, 0x505C, 0x63A8, 
0x665A, 0x671B, 0x7EF4, 0x8C13, 0x7EED, 0x5D16, 0x773C, 0x8425, 0x7AE0,
0x804C, 0x7740, 0x65CF, 0x7F16, 0x671D, 0x7A0B, 0x7B54, 0x8463, 0x5E45, 
0x5BCC, 0x6E2F, 0x96C6, 0x8857, 0x6B3E, 0x91CF, 0x843D, 0x724C, 0x666E, 
0x68CB, 0x5F3A, 0x786E, 0x6563, 0x5C5E, 0x63D0, 0x7AE5, 0x559C, 0x6E38, 
0x9047, 0x8D8A, 0x66FE, 0x88C5, 0x798F, 0x8DDF, 0x8F91, 0x7CAE, 0x697C,
0x6EE1, 0x9E4F, 0x7FA4, 0x9521, 0x50CF, 0x6E90, 0x7167, 0x7F6A, 0x5BDF, 
0x6B4C, 0x7BA1, 0x7CBE, 0x9759, 0x5883, 0x6A21, 0x5899, 0x8D5B, 0x7B97, 
0x821E, 0x9C9C, 0x9700, 0x6F14, 0x613F, 0x6F6E, 0x989D, 0x7A3F, 0x9760, 
0x9898, 0x5F71, 0x589E, 0x9910, 0x6574, 0x8B66, 0x9732


 
};

//                       >>>>>>>>>> USER CONFIGURED PARAMETERS END HERE <<<<<<<<<<

////////////////////////////////////////////////////////////////////////////////////////////////

// Variable to hold the inclusive Unicode range (16 bit values only for this sketch)
int firstUnicode = 0;
int lastUnicode  = 0;

PFont myFont;

PrintWriter logOutput;

void setup() {
  logOutput = createWriter("FontFiles/System_Font_List.txt"); 

  size(1000, 800);

  // Print the available fonts to the console as a list:
  String[] fontList = PFont.list();
  printArray(fontList);

  // Save font list to file
  for (int x = 0; x < fontList.length; x++)
  {
    logOutput.print("[" + x + "] ");
    logOutput.println(fontList[x]);
  }
  logOutput.flush(); // Writes the remaining data to the file
  logOutput.close(); // Finishes the file

  // Set the fontName from the array number or the defined fontName
  if (fontNumber >= 0)
  {
    fontName = fontList[fontNumber];
    fontType = "";
  }

  char[]   charset;
  int  index = 0, count = 0;

  int blockCount = unicodeBlocks.length;

  for (int i = 0; i < blockCount; i+=2) {
    firstUnicode = unicodeBlocks[i];
    lastUnicode  = unicodeBlocks[i+1];
    if (lastUnicode < firstUnicode) {
      delay(100);
      System.err.println("ERROR: Bad Unicode range secified, last < first!");
      System.err.print("first in range = 0x" + hex(firstUnicode, 4));
      System.err.println(", last in range  = 0x" + hex(lastUnicode, 4));
      while (true);
    }
    // calculate the number of characters
    count += (lastUnicode - firstUnicode + 1);
  }

  count += specificUnicodes.length;

  println();
  println("=====================");
  println("Creating font file...");
  println("Unicode blocks included     = " + (blockCount/2));
  println("Specific unicodes included  = " + specificUnicodes.length);
  println("Total number of characters  = " + count);

  if (count == 0) {
    delay(100);
    System.err.println("ERROR: No Unicode range or specific codes have been defined!");
    while (true);
  }

  // allocate memory
  charset = new char[count];

  for (int i = 0; i < blockCount; i+=2) {
    firstUnicode = unicodeBlocks[i];
    lastUnicode  =  unicodeBlocks[i+1];

    // loading the range specified
    for (int code = firstUnicode; code <= lastUnicode; code++) {
      charset[index] = Character.toChars(code)[0];
      index++;
    }
  }

  // loading the specific point codes
  for (int i = 0; i < specificUnicodes.length; i++) {
    charset[index] = Character.toChars(specificUnicodes[i])[0];
    index++;
  }

  // Make font smooth (anti-aliased)
  boolean smooth = true;

  // Create the font in memory
  myFont = createFont(fontName+fontType, displayFontSize, smooth, charset);

  // Print characters to the sketch window
  fill(0, 0, 0);
  textFont(myFont);

  // Set the left and top margin
  int margin = displayFontSize;
  translate(margin/2, margin);

  int gapx = displayFontSize*10/8;
  int gapy = displayFontSize*10/8;
  index = 0;
  fill(0);

  textSize(displayFontSize);

  for (int y = 0; y < height-gapy; y += gapy) {
    int x = 0;
    while (x < width) {

      int unicode = charset[index];
      float cwidth = textWidth((char)unicode) + 2;
      if ( (x + cwidth) > (width - gapx) ) break;

      // Draw the glyph to the screen
      text(new String(Character.toChars(unicode)), x, y);

      // Move cursor
      x += cwidth;
      // Increment the counter
      index++;
      if (index >= count) break;
    }
    if (index >= count) break;
  }


  // creating font to save as a file
  PFont    font;

  font = createFont(fontName+fontType, fontSize, smooth, charset);

  println("Created font " + fontName + str(fontSize) + ".vlw");

  // creating file
  try {
    print("Saving to sketch FontFiles folder... ");

    OutputStream output = createOutput("FontFiles/" + fontName + str(fontSize) + ".vlw");
    font.save(output);
    output.close();

    println("OK!");

    delay(100);

    // Open up the FontFiles folder to access the saved file
    //String path = sketchPath();
    //Desktop.getDesktop().open(new File(path+"/FontFiles"));

    System.err.println("All done! Note: Rectangles are displayed for non-existant characters.");
  }
  catch(IOException e) {
    println("Doh! Failed to create the file");
  }
}
